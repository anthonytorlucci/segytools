name: publish

on: 
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #  check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #  load cached venv if cache exists
      #----------------------------------------------
      - name: Install cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      #  install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      #  install root project
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction      
      #----------------------------------------------
      #  publish TEST_PYPI
      #----------------------------------------------
      - run: poetry config repositories.testpypi https://test.pypi.org/legacy/
      - run: poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: publish package
        run: poetry publish --build -r testpypi
      #----------------------------------------------
      #  publish PYPI on release
      #----------------------------------------------
      - run: poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
      - name: publish package on release
        run: poetry publish --build
      

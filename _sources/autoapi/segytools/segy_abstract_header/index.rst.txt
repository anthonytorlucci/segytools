:py:mod:`segytools.segy_abstract_header`
========================================

.. py:module:: segytools.segy_abstract_header

.. autoapi-nested-parse::

   segy abstract header

   Copyright 2022 Anthony Torlucci

   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   segytools.segy_abstract_header.SegyAbstractHeader




.. py:class:: SegyAbstractHeader


   Bases: :py:obj:`object`

   Base class for Segy Headers.

   SegyAbstractHeader is a container of SegyHeaderItem objects and inherited
   by SegyFileHeader and SegyTraceHeader. Any custom trace headers classes
   should inherit this class.

   .. attribute:: byte_length

      The number of bytes of the header. This must be overwritten is
      converting back to bytes object.

      :type: int

   .. method:: header_list()

      Returns a list of header item objects.

   .. method:: key_object_dict()

      Returns a dictionary of header items identifiers and header item
      objects.

   .. method:: key_property(name:str, field_id: str)

      Returns a property (field_id) of a segy header item based on the
      identifier `name`.

   .. method:: mapped_value(name: str)

      Returns the mapped value of the header item with identifier `name` if
      the header item value is mapped.

   .. method:: set_key_property(self, name: str, field_id: str, value: Any)

      Sets the value of the field of a header item based on the identifier
      `name`.


   .. py:attribute:: byte_length
      :value: 0

      

   .. py:method:: __str__() -> str

      Return str(self).


   .. py:method:: header_list() -> list

      Returns a list of header item objects.


   .. py:method:: key_object_dict() -> dict

      Returns a dictionary of header items identifiers and header item
      objects.


   .. py:method:: set_header_values(buf: bytes, byteorder: str)

      Set the value for each header item in the container.

      :param buf: The byte data used to set the values. len(bsgy) must be equal to
                  the `byte_length` attribute.
      :type buf: bytes
      :param byteorder: Used to decode the byte data. Must be either 'little' or 'big'.
      :type byteorder: str

      :raises ValueError: len(bsgy) != byte_length
      :raises ValueError: byteorder != 'little' or byteorder != 'big'


   .. py:method:: to_bytes(byteorder: str) -> bytes

      Converts each header item to a byte object and returns the complete
      bytes object of length `byte_length`.

      :param byteorder: Either 'big' or 'little'
      :type byteorder: str

      :rtype: bytes



